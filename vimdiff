#!/bin/sh
help() { cat <</help
Drop-in replacement for [g]vimdiff.
With no files, opens a blank diff. With one file, tries to find something
to diff against from git, a snapshot directory, or a SyncThing revision.

/help

  if [ "$full_help" = 1 ] || [ ! -t 1 ] || [ "$(tput lines)" -gt 92 ]; then
    vim --help 2>&1 |awk -v self=" $self " '{ gsub(" vim ", self) } NR > 2'
  else
    echo "Usage: vimdiff [arguments] [file ...]"
  fi

  cat <</help

Arguments recognized by vimdiff-auto wrapper (@adamhotep misc-scripts):
   --full-help          Also show vim options here
   --snapshot <path>    Snapshot directory (absolute or relative to the file).
                        ZFS snapshots are auto-detected UNLESS this path exists.
                        Non-ZFS snapshots (e.g. for NetApps) are experimental.
                        Currently \`$snapshot\`
   --syncthing <path>   SyncThing versions directory (relative or absolute).
                        Currently \`$stversions\`"

Install ahead of vimdiff in your \$PATH like /usr/local/bin/vimdiff and create a
symlink named gvimdiff that points to it (if you have gvim installed).

/help
  version
}

version() { cat <</version
Wraps $({ vim --help 2>/dev/null || echo vim; } |head -n1)
Part of misc-scripts:  https://github/adamhotep/misc-scripts
vimdiff-auto 2.1.20240804.0 copyright 2009+ by Adam Katz <@adamhotep>, GPLv3
/version
  exit
}

# Version 1.x (`vimdiff+cvs`) could also automatically traverse CVS & Subversion
# repositories, but that functionality has been removed in favor of git.
#
# While this script can properly invoke git itself, you can additionally put
# `vimdiff = difftool -y -t vimdiff` in the `[alias]` section of ~/.gitconfig
# (and the same for `gvimdiff`) to be able to run `git vimdiff bar.txt`

# Escape glob characters.
escape_glob() { echo "$*" |sed 's/[\]\[\\*?]/\\&/g'; }

# We need to do some crazy escaping for the nested call to git.
# Escape single-quotes; `I'm happy` -> `'I'\''m happy'`
# This could probably use some more security vetting.
escape_squot() { gitcmd="$gitcmd '$(echo "$*" |sed "s/'/'\\''/g")'"; }

# Usage: git_diff [DIR] FILE
# If git tracks FILE, vimdiff it vs git HEAD (even if there are no differences)
git_diff() {
  : "Seeking a git revision for <$1>"
  local owd="$PWD"
  if ! command -v git >/dev/null; then
    : "git is not installed, skipping git diff"
    return 1
  fi
  if [ "$PWD" != "${1%/*}" ]; then cd "${1%/*}"; fi
  #if git ls-files --error-unmatch "$1" 2>/dev/null; then	# git tracked?
  git diff --quiet "$last" 2>/dev/null
  case $? in
    ( 0 )	echo "git repo found but file is untracked or unchanged" ;;
    ( 1 )	: "Found a git revision of <$1> that differs"
    		exec git difftool --no-prompt --extcmd="$gitcmd" -- "$1" ;;
    ( * )	: "Failed to find a git respository for <$1>" ;;
  esac
  if [ "$PWD" != "${1%/*}" ]; then cd "$owd"; fi
}

# Usage: syncthing_version FILE
# Find a potential SyncThing version of FILE
syncthing_version() {
  : "Seeking a SyncThing version for <$1>"
  local dir="$1" old
  while dir="${dir%/*}" && [ -d "$dir" ]; do
    if [ -d "$dir/$stversions" ]; then
      old="$dir/$stversions/${last#$dir/}"	# trash can versioning
      if [ -f "$old" ] && [ -s "$old" ]; then break; fi
      fn="${last##*/}"
      fn_ver="$(escape_glob "$fn")"
      ext="${fn_ver##*.}"
      d='[0-9]'
      stamp="~20$d$d[01]$d[0-3]$d-[012]$d[0-5]$d[0-6]$d"
      if [ "$ext" != "$fn_ver" ]; then # we have an extension
        fn_ver="${fn_ver%.$ext}$stamp.$ext"
      else
        fn_ver="$fn_ver$stamp"
      fi
      # BSD find has -print0 and BSD sort has -z but BSD tail LACKS -z :-(
      old="$(find "$dir/$stversions" -type f -size +0 \
        -name "$fn_ver" |sort |tail -n1)"
      # TODO? Loop from newest to oldest and stop on the first DIFFERENT file
      #       Do this by abstracting the filter for `find` in snapshot_version.
      break	# for speed & simplicity, assume there are no nested $stversions
    fi
  done
  if [ -s "$old" ]; then
    echo "$old"
  else
    return 1
  fi
}

# Usage: snapshot_version FILE
# Should support ZFS, NetApps, and more. Only ZFS is tested.
# Expects a file of the same name as FILE 1-2 levels below the snapshot dir.
# Auto-senses the ZFS snapshot dir.
snapshot_version() {
  : "Seeking a snapshot for <$1>"
  local dir zfs= old= parent="${1%/*}/"
  case "$snapshot" in
    ( /* )	dir="$snapshot" ;;
    ( * )	dir="$parent$snapshot" ;;
  esac
  if [ ! -d "$dir" ]; then
    # *if* on a ZFS filesystem, set $zfs to the file's ZFS mount point
    # GNU, BSD, and Busybox all support `df -T`. Busybox lacks `df -t type`.
    zfs=$(df -T "$1" |awk '$2=="zfs" { gsub(/.*%[[:space:]]+\//, "/"); print }')
    dir="$zfs/.zfs/snapshot"
  fi
  if [ -d "$dir" ]; then
    : "Seeking newest different snapshot of <${1#$zfs/}> in <$dir>"
    # GNU, BSD, and Busybox `find` all support -maxdepth, -mindepth, and -print0
    # even though they're not in the POSIX standard. Ditto for `xargs -0`.
    find "$dir" ${zfs:+"$dir/${parent#$zfs/}"} -mindepth 1 -maxdepth 2 -type f \
        -size +0 -name "$(escape_glob "${1##*/}")" -print0 2>/dev/null \
      |xargs -0 ls -td |awk '!seen[$0]++' \
      |while IFS= read -r old; do
        if [ -f "$old" ] && ! diff -q "$1" "$old" >/dev/null; then
          echo "$old"
          return 0
        fi
      done |grep ^ && return 0	# we were in a subshell. this propagates it.
  fi
  return 1
}

# Defaults
self="${0##*/}"
snapshot="${SNAPSHOT_DIR:-.snapshot}"
stversions=".stversions"
vim="exec vim"

last=""
penultimate=""
reset=0
opt=1
skip=0
full_help=0
gitcmd="$0 --nofork"

# Loop through the arguments, find -h/--help, note the last two files (if any).
# This is a little messy because vim accepts options EVERYWHERE except after --
for arg in "$@"; do
  : "Parsing arg <$arg>"
  if [ "$reset" = 0 ]; then reset=1; set --; fi	# reset the $@ array
  if [ "$opt" = 1 ]; then
    if [ "$skip" != 0 ]; then
      case "$skip" in
        ( stversions )	stversions="$arg" ;;	# SyncThing versions directory
        ( snapshot )	snapshot="$arg" ;;	# Snapshot directory
        ( 1 )	escape_squot "$arg"; set -- "$@" "$arg" ;;	# vim option arg
      esac
      skip=0
      continue
    elif [ "$arg" != "${arg#[-+]?}" ]; then
      case "$arg" in
        # options with required arguments: cue skipping
        ( --cmd | -[!-]*[tqcSiPrsTuUwW] | -[tqcSiPrsTuUwW] \
        | --gui-dialog-file | --log | --remote-expr | --remote-send \
        | --servername | --socketid | --startuptime | --windowid ) skip=1 ;;
        # options that we intercept and use locally
        ( -- )			opt=0 ;;
        ( --full-help ) 	full_help=1; help ;;
        ( --help | -[h?]* | -[!-]*[h?]* )	help ;;
        ( --noop )		vim="echo ${vim#exec }" gitcmd="echo $gitcmd" ;;
        ( --snap*=* )		snapshot="${arg#*=}" ;;
        ( --snap* ) 		skip=snapshot ;;
        ( --syncthing*=* )	stversions="${arg#*=}" ;;
        ( --syncthing* )	skip=stversions ;;
        ( --version )		version ;;
      esac
      if [ "$skip" = 1 ]; then
        escape_squot "$arg"
        set -- "$@" "$arg"
      fi
      continue
    fi
  fi
  if [ -e "$last" ]; then penultimate="$last"; fi
  if [ -e "$arg" ]; then last="$arg"; fi
  set -- "$@" "$arg"
done

# no file arguments: open a diff between two new files
if [ ! -e "$last" ]; then
  set -- "$@" +'vsp|enew|diffthis'

# Just one file
elif [ -z "$penultimate" ]; then
  last=$(readlink -f "$last")	# we want the true path, not a symlink ...right?

  git_diff "$last"	# If there's a git revision to diff, do that and exit

  if penultimate="$(syncthing_version "$last")"; then
    : "Found a syncthing version of <$last>"
    # we're taking full advantage of vim's ability to take options anywhere
    # and avoiding the need to inject $penultimate immediately before $last
    set -- "$penultimate" "$@"
  elif penultimate="$(snapshot_version "$last")"; then
    : "Found a snapshot copy of <$last>"
    set -- "$penultimate" "$@"
  else
    apology='echo "(Could not find a git or snapshot to diff)"'
    set -- "$@" +"vsp|enew|diffthis|$apology"
  fi
fi

undef() { echo "Undefined script name '$self', guessing $* vim" >&2; }

case "$self" in
  ( vimdiff* )	$vim -d "$@" ;;
  ( *vimdiff* )	$vim -gd "$@" ;;
  ( [gkwx]* ) 	undef graphical; $vim -gd "$@" ;;
  ( * ) 	undef console; $vim -d "$@" ;;
esac

