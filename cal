#!/bin/sh
help() {
  echo 'Wrapper for cal supporting month names, 9mo view, and nearest month'
  "$REAL_CAL" -h 2>&1 |sed 's/\[\[month\] /[month] [/; s/-31/-139/'
  cat <</help

The \`-9\` option gives a nine-month view centered on the target month (or now).

If just given a month, shows calendar for closest instance of given month.
See also \`cal -m month\` to use the current year (\`-m\` bypasses this script).
\`-m\` allows 'f' and 'p' for following and previous years given decimal months.

/help
  version
}

version() {
  echo "cal-wrapper 0.2.20200118 copyright 2019+ by Adam Katz, GPL v2+"
  echo "https://github.com/adamhotep/misc-scripts"
  exit
}

REAL_CAL="/usr/bin/cal"

run() {
  local RETVAL
  if [ "$NINEMO" = 1 ]; then
    "$REAL_CAL" "$@" $pre_mo $pre_yr
  fi
  "$REAL_CAL" "$@" ${month:+"$month"} ${year:+"$year"}
  RETVAL=$?
  if [ "$NINEMO" = 1 ]; then
    "$REAL_CAL" "$@" $post_mo $post_yr
  fi
  exit $RETVAL
}

month() {
  local m=0
  case "$1" in	# yes, cal from bsdmainutils 11.1.2+b1 accepts "Mayonnaise"
    ( [Jj][Aa][Nn]* ) m=1 ;;
    ( [Ff][Ee][Bb]* ) m=2 ;;
    ( [Mm][Aa][Rr]* ) m=3 ;;
    ( [Aa][Pp][Rr]* ) m=4 ;;
    ( [Mm][Aa][Yy]* ) m=5 ;;
    ( [Jj][Uu][Nn]* ) m=6 ;;
    ( [Jj][Uu][Ll]* ) m=7 ;;
    ( [Aa][Uu][Gg]* ) m=8 ;;
    ( [Ss][Re][Pp]* ) m=9 ;;
    ( [Oo][Cc][Tt]* ) m=10 ;;
    ( [Nn][Oo][Vv]* ) m=11 ;;
    ( [Dd][Ee][Cc]* ) m=12 ;;
  esac
  echo "$m"
}

if [ $# = 0 ]; then
  run
fi

ABORT=0 NINEMO= POST=
while getopts abcdefghijklm:nopqrs:tuvwxyzA:B:CD:EFGH:IJKLMNOPQRSTUVWXYZ0123456789-: opt 2>/dev/null; do
  case $opt$OPTARG in
    ( 9 )		NINEMO=1 ;;
    ( [13y] )		NINEMO=0 ;;	# these overide -9 if later
    ( h | -help )	help ;;
    ( m )		ABORT=1 ;;	# bypass script
    ( [Vv] | -ver* )	version ;;
  esac
done
# note the lack of a shift here

argv=$# 		# parameter count
optv=$((OPTIND-1))	# option count

count=0 month= year= pre_mo= pre_yr= post_mo= post_yr=
for parameter in "$@"; do
  count=$((count + 1))
  if [ "$count" = 1 ]; then set --; fi	# clear parameter list
  if [ "$count" -le $optv ]; then
    case "$parameter" in
      ( -*[mABDH-]*9* )	set -- "$@" "$parameter" ;; # `9` in option's argument
      ( -*9* )		set -- "$@" "${parameter%%9*}3${parameter#*9}" ;; # 9->3
      ( * )		set -- "$@" "$parameter" ;;
    esac
  elif [ "$count" = "$argv" ] && [ "$((argv - optv))" = 2 ]; then
    year="$parameter"
  else
    month="$parameter"
  fi
done
# $@ should now be JUST the options. No month, no year.

if [ "$NINEMO" = 1 ]; then
  pre_mo="$month"	# not yet "pre"
  pre_yr="$year"	# not yet "pre"
  if [ -z "$pre_mo" ]; then pre_mo=$(date +%m); fi
  if [ -z "$pre_yr" ]; then pre_yr=$(date +%Y); fi
  post_yr="$pre_yr"
  post_mo=$((pre_mo + 3))
  pre_mo=$((pre_mo - 3))
  case $pre_mo in
    ( 0 )	pre_mo=12 pre_yr=$((pre_yr - 1)) ;;
    ( -1 )	pre_mo=11 pre_yr=$((pre_yr - 1)) ;;
    ( -2 )	pre_mo=10 pre_yr=$((pre_yr - 1)) ;;
  esac
  case $post_mo in
    ( 13 )	post_mo=1 post_yr=$((pre_yr + 1)) ;;
    ( 14 )	post_mo=2 post_yr=$((pre_yr + 1)) ;;
    ( 15 )	post_mo=3 post_yr=$((pre_yr + 1)) ;;
  esac
fi

# if we're aborting  or  there's no year or the year is under 100
#   or all parameters are options or the month isn't by name
if [ "$ABORT" = 1 ] || [ "${year:-0}" -ge 100 ] 2>/dev/null \
  || [ $optv = $argv ] || [ "${month:-none}" = "${month#[JFMAJSONDjfmajsond]}" ]
then
  run "$@"
fi

# two digit year: expand to closest year (in Feb 2019, 69->1969, 68->2068)
if [ "$year" -ge 10 -a "$year" -lt 100 ] 2>/dev/null; then
  now="$(date +%Y%j)"
  now_dayofyear=${now#????}
  now_year=${now%$now_dayofyear}
  # round to half year (one day off during leap years, whatever)
  if [ "1$now_dayofyear" -ge 1182 ]; then now_year=$((now_year + 1)); fi
  year="${now%??$now_dayofyear}$year"
  if [ $((now_year + 50)) -le "$year" ]; then
    year=$((year - 100))
  elif [ $((year + 50)) -lt "$now_year" ]; then
    year=$((year + 100))
  fi
elif [ -z "$year" ]; then
  #date -d "$1 15" +%Y 2>/dev/null && return	# GNU date
  now="$(date +%Y%m)"
  year="${now%%??}"	# current year
  mon="${now#????}"	# current month
  mon="${mon#0}"	# remove zero-padding to avoid octal interpretation
  m="$(month $month)"
  if [ $((m + 6)) -lt $mon ]; then
    year=$((year + 1))
  elif [ $((mon + 6)) -lt $m ]; then
    year=$((year - 1))
  fi
fi

run "$@"
